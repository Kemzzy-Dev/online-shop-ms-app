pipeline {
  agent {
    label 'node1'
  }

  environment {
    IMAGE_NAME = "cartservice"
    IMAGE_TAG = "latest"
    TRIVY_OUTPUT = "trivy-scan-report.txt"
    DOCKERHUB_USERNAME = "kemzzy"
  }


  stages {

    stage('Checkout code') {

      steps {
        git branch: 'main', url: 'https://github.com/Kemzzy-Dev/online-shop-ms-app'
      }
    }

    stage('Install .NET') {
      steps {
        script {
          sh """
              wget https://dot.net/v1/dotnet-install.sh
              chmod +x dotnet-install.sh
              ./dotnet-install.sh --version 7.0
          """
        }
      }
    }

    stage('Restore Dependencies') {
      steps {
          sh 'dotnet restore cartservice.csproj'
      }
    }
    
    stage('Sonarqube Scan analysis') {
      environment {
        scannerHome = tool 'SonarScanner for .NET';
      }
      steps {
        withSonarQubeEnv(credentialsId: 'sonarqube', installationName: 'SonarQubeServer') {
          dir('src/cartservice/src') {
            sh "dotnet ${scannerHome}/SonarScanner.MSBuild.dll begin /k:\"cartservice\""
            sh "dotnet build"
            sh "dotnet ${scannerHome}/SonarScanner.MSBuild.dll end"
          }
        }
      }
    }

    stage('Build Docker image') {
      steps {
        script {
          def image = docker.build("${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${IMAGE_TAG}", "./src/cartservice/src")
        }
      }
    }

    stage('Scan Docker Image with Trivy') {
      steps {
        script {
          sh """
          trivy image \
          --format json \
          --output ${TRIVY_OUTPUT} \
          --severity HIGH,CRITICAL \
          ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${IMAGE_TAG}
          """
        }
      }
    }

    stage('Push Docker image') {
      steps {
        script {
          // empty because we are using dockerhub
          docker.withRegistry('', 'dockerhub-credentials') {
            docker.image("${DOCKERHUB_USERNAME}/${IMAGE_NAME}:${IMAGE_TAG}").push()
          }
        }
      }
    }
  }
}